@using ClashOfTheCharacters.Helpers

@model ClashOfTheCharacters.Models.WildBattle

@{
    ViewBag.Title = "Battle";
    <script src="~/Scripts/scrollbar-bottom.js"></script>
}

@{
    var userCreature = Model.WildBattleCreatures.Where(wbc => wbc.UserId != null && wbc.Alive).OrderBy(wbc => wbc.Slot).FirstOrDefault();
    var cpuCreature = Model.WildBattleCreatures.Where(wbc => wbc.UserId == null && wbc.Alive).OrderBy(wbc => wbc.Slot).FirstOrDefault();

    if (userCreature == null)
    {
        userCreature = Model.WildBattleCreatures.Where(wbc => wbc.UserId != null).OrderByDescending(wbc => wbc.Slot).First();
    }

    if (cpuCreature == null)
    {
        cpuCreature = Model.WildBattleCreatures.Where(wbc => wbc.UserId == null).OrderByDescending(wbc => wbc.Slot).First();
    }
}

<a href="/Land/Index" class="btn btn-custom margin-bottom-10" style="color: black">Go back</a>

<div class="row margin-bottom-20">
    <div class="col-md-4 col-sm-4 col-xs-12 margin-bottom-20">

        <div class="col-md-12 col-sm-12 col-xs-12 gamecard">
            <h4>
                <span><img class="gamecard-rarity" src="@Helper.GetRarityUrl(userCreature.Creature.Rarity)" /></span>
                <strong>@userCreature.Creature.Name</strong>
                <span> Lvl: @userCreature.Level</span>
                <span><img class="gamecard-element" src="@Helper.GetElementUrl(userCreature.Creature.Element)" /></span>
            </h4>
            <img class="img-responsive gamecard-image" src=@userCreature.Creature.ImageUrl />
            <div class="gamecard-hpbar">
                <div style="width: @Helper.GetPercentage(userCreature.Hp, userCreature.MaxHp)%"></div>
            </div>
            <p class="text-right">Hp: @userCreature.Hp / @userCreature.MaxHp</p>
            <p class="margin-top-20">Dmg: @userCreature.Damage</p>
            <p>Def: @userCreature.Defense</p>

        </div>

        <div class="col-md-12 gamecard-battle-xs">

            @{
                int counter = 0;
            }

            @foreach (var battleCreature in Model.WildBattleCreatures.Where(wbc => wbc.UserId != null).Except(Model.WildBattleCreatures.Where(wbc => wbc.Id == userCreature.Id)).OrderBy(wbc => wbc.Slot).OrderByDescending(wbc => wbc.Alive))
            {
                counter++;

                <div class="col-md-4 col-xs-4">
                    <div class="col-md-12 gamecard-xs">
                        @if (battleCreature.Hp == 0)
                        {
                            <div class="gamecard-dead"></div>
                        }
                        <p>
                            Lvl: @battleCreature.Level

                            <span>
                                <img class="gamecard-element-xs" src="@Helper.GetElementUrl(battleCreature.Creature.Element)" />
                            </span>

                        </p>
                        <img class="img-responsive" src="@battleCreature.Creature.ImageUrl" />
                        <p>Dmg: @battleCreature.Damage</p>
                        <p>Def: @battleCreature.Defense</p>
                        <p>Hp: @battleCreature.Hp</p>
                    </div>
                </div>

                if (counter == 3)
                {
                    <div class="clearfix visible-xs"></div>
                    <div class="clearfix visible-sm"></div>
                    <div class="clearfix visible-md"></div>
                    <div class="clearfix visible-lg"></div>
                }
            }
        </div>

    </div>
    <div class="col-md-4 col-sm-4 col-xs-12 margin-bottom-20">

        @if (!Model.Finished)
        {
            <h3 class="text-center">Your Turn</h3>
        }

        else if (Model.Won)
        {
            <h3 class="text-center">You Won!</h3>
        }

        else
        {
            <h3 class="text-center">You Lost!</h3>
        }

        <hr />

        <div class="div-actions margin-bottom-10">
            @foreach (var action in Model.WildBattleActions)
            {
                if (action.CaptureAttempt)
                {
                    <h4 class="text-center">You tried to capture @action.Defender.Creature.Name</h4>
                    <h5 class="text-center @Html.AttributeEncode(action.CaptureSuccess == true ? "text-success" : "text-danger")">The capture attempt @Helper.GetEffect(action.Effect).ToLower()</h5>
                }

                else
                {
                    <h4 class="text-center @Html.AttributeEncode(action.Attacker.UserId != null ? "text-success" : "text-danger")">@action.Attacker.Creature.Name dealt @action.Damage to @action.Defender.Creature.Name</h4>
                    <h5 class="text-center @Html.AttributeEncode(action.Attacker.UserId != null ? "text-success" : "text-danger")">The attack was @Helper.GetEffect(action.Effect).ToLower()</h5>
                }

                <br />
            }
        </div>

        @if (!Model.Finished)
        {
            <form role="form" action="/Land/Attack" method="post" class="margin-bottom-10">
                <button type="submit" class="btn btn-custom btn-block">Attack</button>
            </form>

            <button data-toggle="dropdown" class="btn btn-custom btn-block">Capture</button>
            <ul class="dropdown-menu">
                
                @if (!Model.User.UserItems.Any(ui => ui.Item.ItemType == ItemType.Net && ui.InBag))
                {
                    <li>You have no capture equipment</li>
                }

                else
                {
                    foreach (var item in Model.User.UserItems.Where(ui => ui.InBag))
                    {
                        <li>
                            <form role="form" action="/Land/Capture" method="post">
                                <input hidden name="userItemId" value="@item.Id" />
                                <button type="submit" class="btn-dropdown">@item.Item.Name (@item.Quantity)</button>
                            </form>
                        </li>
                    }
                }

            </ul>
        }

        else
        {
            <!-- Trigger the modal with a button -->
            <button type="button" class="btn btn-custom btn-block margin-bottom-10" data-toggle="modal" data-target="#reward">Reward</button>

            <!-- Modal -->
            <div id="reward" class="modal fade" role="dialog">
                <div class="modal-dialog">

                    <!-- Modal content-->
                    <div class="modal-content modal-reward">

                        <div class="modal-body container-fluid">
                            <div class="col-md-12 text-center">
                                <div class="col-md-2">
                                    <img src="@Model.User.ImageUrl" class="img-circle img-responsive" />
                                </div>
                                <div class="col-md-5">
                                    <h5>Gold</h5>
                                    <h3 class="@Html.AttributeEncode(Model.Won ? "text-success" : "text-danger")">@Model.XpEarned</h3>
                                </div>
                                <div class="col-md-5">
                                    <h5>Xp</h5>
                                    <h3 class="@Html.AttributeEncode(Model.Won ? "text-success" : "text-danger")">@Model.GoldEarned</h3>
                                </div>
                               
                            </div>
                            <div class="col-md-12">
                                <hr />
                            </div>
                            <div class="col-md-12 col-xs-12">
                                @{ int counterXs = 0;}
                                @foreach (var wildBattleCreature in Model.WildBattleCreatures.Where(wbc => wbc.UserId != null && wbc.XpEarned > 0))
                                {
                                    counterXs++;

                                    <div class="col-md-4 col-xs-6 margin-bottom-10">
                                        <div class="col-md-8 col-xs-9">
                                            <div class="col-md-12 gamecard-xs">
                                                <p>
                                                    Lvl: @wildBattleCreature.Level

                                                    <span>
                                                        <img class="gamecard-element-xs" src="@Helper.GetElementUrl(wildBattleCreature.Creature.Element)" />
                                                    </span>

                                                </p>
                                                <img class="img-responsive" src="@wildBattleCreature.Creature.ImageUrl" />
                                                <p>Dmg: @wildBattleCreature.Damage</p>
                                                <p>Def: @wildBattleCreature.Defense</p>
                                                <p>Hp: @wildBattleCreature.Hp</p>
                                            </div>
                                        </div>
                                        <div class="col-md-4 col-xs-3">
                                            <h5>Xp</h5>
                                            <h4 class="text-success">@wildBattleCreature.XpEarned</h4>
                                        </div>
                                    </div>

                                    if (counterXs % 2 == 0)
                                    {
                                        <div class="clearfix visible-xs"></div>
                                    }
                                }
                            </div>
                            @if (Model.WildBattleActions.Any(wba => wba.CaptureSuccess == true && Model.Won))
                            {
                                <div class="col-md-12 text-center">
                                    <hr />
                                    <h4>New Creatures!</h4>
                                </div>
                                <div class="col-md-12">
                                    @foreach (var capture in Model.WildBattleActions.Where(wba => wba.CaptureSuccess == true && Model.Won))
                                    {
                                        <div class="col-md-3 col-xs-6 margin-bottom-10">

                                                <div class="col-md-12 gamecard-xs">
                                                    <p>
                                                        Lvl: @capture.Defender.Level

                                                        <span>
                                                            <img class="gamecard-element-xs" src="@Helper.GetElementUrl(capture.Defender.Creature.Element)" />
                                                        </span>

                                                    </p>
                                                    <img class="img-responsive" src="@capture.Defender.Creature.ImageUrl" />
                                                    <p>Dmg: @capture.Defender.Damage</p>
                                                    <p>Def: @capture.Defender.Defense</p>
                                                    <p>Hp: @capture.Defender.Hp</p>
                                                </div>

                                        </div>
                                    }
                                </div>
                            }

                        </div>
                    </div>

                </div>
            </div>

            <form role="form" action="/Land/Finish" method="post" class="margin-bottom-10">
                <button type="submit" class="btn btn-custom btn-block">Finish</button>
            </form>
        }

    </div>
    <div class="col-md-4 col-sm-4 col-xs-12">

        <div class="col-md-12 col-sm-12 col-xs-12 gamecard">
            <h4>
                <span><img class="gamecard-rarity" src="@Helper.GetRarityUrl(cpuCreature.Creature.Rarity)" /></span>
                <strong>@cpuCreature.Creature.Name</strong>
                <span> Lvl: @cpuCreature.Level</span>
                <span><img class="gamecard-element" src="@Helper.GetElementUrl(cpuCreature.Creature.Element)" /></span>
            </h4>
            <img class="img-responsive gamecard-image" src=@cpuCreature.Creature.ImageUrl />
            <div class="gamecard-hpbar">
                <div style="width: @Helper.GetPercentage(cpuCreature.Hp, cpuCreature.MaxHp)%"></div>
            </div>
            <p class="text-right">Hp: @cpuCreature.Hp / @cpuCreature.MaxHp</p>
            <p class="margin-top-20">Dmg: @cpuCreature.Damage</p>
            <p>Def: @cpuCreature.Defense</p>
        </div>

        <div class="col-md-12 gamecard-battle-xs">

            @{
                counter = 0;
            }

            @foreach (var battleCreature in Model.WildBattleCreatures.Where(wbc => wbc.UserId == null).Except(Model.WildBattleCreatures.Where(wbc => wbc.Id == cpuCreature.Id)).OrderBy(wbc => wbc.Slot).OrderByDescending(wbc => wbc.Alive))
            {
                counter++;

                <div class="col-md-4 col-xs-4">
                    <div class="col-md-12 gamecard-xs">
                        @if (battleCreature.Hp == 0)
                        {
                            <div class="gamecard-dead"></div>
                        }

                        else
                        {
                            <div class="gamecard-hidden"></div>
                        }
                        <p>
                            Lvl: @battleCreature.Level

                            <span>
                                <img class="gamecard-element-xs" src="@Helper.GetElementUrl(battleCreature.Creature.Element)" />
                            </span>

                        </p>
                        <img class="img-responsive" src="@battleCreature.Creature.ImageUrl" />
                        <p>Dmg: @battleCreature.Damage</p>
                        <p>Def: @battleCreature.Defense</p>
                        <p>Hp: @battleCreature.Hp</p>
                    </div>
                </div>

                if (counter == 3)
                {
                    <div class="clearfix visible-xs"></div>
                    <div class="clearfix visible-sm"></div>
                    <div class="clearfix visible-md"></div>
                    <div class="clearfix visible-lg"></div>
                }
            }
        </div>
    </div>
</div>



