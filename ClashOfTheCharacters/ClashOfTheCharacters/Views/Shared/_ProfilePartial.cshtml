@using ClashOfTheCharacters.Models
@using ClashOfTheCharacters.Helpers

@model ClashOfTheCharacters.ViewModels.ProfilePartialViewModel

<section class="container-fluid profile-partial">

    <h4>

        <span>
            <img class="img-circle" src="@Model.ImageUrl" />
        </span> @Model.Username <span>
            Lvl: @Model.Level
        </span><span class="span-level">
            Rank: #@Model.Rank
        </span>
    </h4>
    <a class="fancybox" href="#ChangePicture"><span class="fa fa-wrench avatar-wrench text-warning"></span></a>

    @*Profile Picture*@
    <div class="container-fluid fancybox-hidden" id="ChangePicture">
        <h4>Change Profile Picture</h4>
        <form class="form-inline" method="post" action="/User/UpdateProfilePicture">
            <div class="form-group">
                <input type="text" class="form-control" name="imageUrl" placeholder="Enter Url">
            </div>
            <button type="submit" class="btn btn-default">Update</button>
        </form>
    </div>

    <div class="col-md-12">
        <div class="col-md-6 col-xs-6 col-lg-6 col-user-info text-center">
            <span class="fa fa-diamond"> @Model.RainbowGems</span>
        </div>
        <div class="col-md-6 col-xs-6 col-lg-6 col-user-info text-center">
            <span class="fa fa-users"> @Model.TotalUserCreatures</span>
        </div>
        <div class="col-md-6 col-xs-6 col-lg-6 col-user-info text-center">
            <span class="fa fa-line-chart"> @Model.LadderPoints</span>
        </div>
        <div class="col-md-6 col-xs-6 col-lg-6 col-user-info text-center">
            <span class="fa fa-money"> @Model.Gold</span>
        </div>
        <div class="col-md-6 col-xs-6 col-lg-6 col-user-info text-center">
            <span class="fa fa-flash"> @Model.Stamina / @Model.MaxStamina</span>
        </div>
        <div class="col-md-6 col-xs-6 col-lg-6 col-user-info text-center">
            <span class="fa fa-graduation-cap"> @Model.Xp / @Model.MaxXp</span>
        </div>
    </div>

    @if (Model.Stamina != Model.MaxStamina)
            {
        <div class="col-md-12 margin-top-20">
            <p class="text-center">More Stamina in: @(Model.NextStaminaMinutes)m</p>
        </div>
    }

    <div class="row margin-bottom-20">
        <div class="container-characters">

            @for (int i = 0; i < 6; i++)
            {
                if (i % 3 == 0)
                {
                    <div class="clearfix visible-xs"></div>
                    <div class="clearfix visible-sm"></div>
                    <div class="clearfix visible-md"></div>
                    <div class="clearfix visible-lg"></div>
                }

                var userCreature = Model.UserCreatures.Where(uc => uc.InSquad).FirstOrDefault(uc => uc.Slot == i + 1);

                <div class="col-md-4 col-xs-4">
                    <a @Html.AttributeEncode(userCreature != null ? "data-toggle=dropdown class=gamecard-button" : "class=gamecard-disabled")>
                        <div class="col-md-12 gamecard-small">
                            <p>
                                @(userCreature != null ? "Lvl: " + userCreature.Level : "Empty")
                                @if (userCreature != null)
                                {
                                    <span>
                                        <img class="gamecard-element-small" src="@Helper.GetElementUrl(userCreature.Creature.Element)" />
                                    </span>
                                }
                            </p>
                            <img class="img-responsive" src="@(userCreature != null ? userCreature.Creature.ImageUrl : "/Images/Other/concrete.jpg")"/>
                            <p>Dmg: @(userCreature != null ? userCreature.Damage.ToString() : "")</p>
                            <p>Def: @(userCreature != null ? userCreature.Defense.ToString() : "")</p>
                            <p>Hp: @(userCreature != null ? userCreature.Hp.ToString() : "")</p>

                        </div>
                    </a>
                    <ul class="dropdown-menu" style="padding: 5px">
                        <li><h5>Move @(userCreature != null ? userCreature.Creature.Name : "") to</h5></li>
                        @for (int j = 0; j < 6; j++)
                        {
                            var userCreatureInSlot = Model.UserCreatures.Where(uc => uc.InSquad).FirstOrDefault(tm => tm.Slot == j + 1);

                            if (userCreature != null)
                            {
                                if (userCreatureInSlot == null)
                                {
                                    <li><h5>@Html.ActionLink(string.Format("Slot: {0} - Empty", j + 1), "ChangeToEmptySlot", new { userCreatureId = userCreature.Id, slot = j + 1 })</h5></li>
                                }

                                else if (userCreatureInSlot.Id != userCreature.Id)
                                {
                                    <li><h5>@Html.ActionLink(string.Format("Slot: {0} - {1}", j + 1, userCreatureInSlot.Creature.Name), "ChangeSlot", new { originalUserCreatureId = userCreatureInSlot.Id, replacerUserCreatureId = userCreature.Id })</h5></li>
                                }
                            }
                        }
                        @if (userCreature != null)
                        {
                            <li class="divider"></li>

                            if (Model.UserCreatures.Count == 1)
                            {
                                <li><h5>Need at least one creature in squad</h5></li>
                            }

                            else if (Model.Travelling)
                            {
                                <li><h5>Can't remove from squad while travelling</h5></li>
                            }

                            else
                            {
                                <li><h5>@Html.ActionLink("Remove from squad", "RemoveFromSquad", "User", new { userCreatureId = userCreature.Id }, null)</h5></li>
                            }
                        }                     

                    </ul>
                </div>
            }
        </div>
    </div>
</section>

<section class="container-fluid profile-partial margin-top-20">
    <div class="col-md-12 col-battles">
        <h3>On Going</h3>
        <table class="table table-striped">
            <thead>
                <tr>
                    <th>Opponent</th>
                    <th class="text-center">Ladder Points</th>
                    <th class="text-center">Team</th>
                    <th class="text-right">Time Left</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var battle in Model.OngoingBattles)
            {
                var opponent = battle.Challenge.ChallengerId == Model.UserId ? battle.Challenge.Receiver : battle.Challenge.Challenger;

                    <tr>
                        <td class="text-center"><h5>@opponent.UserName</h5></td>
                        <td class="text-center"><h5>@opponent.LadderPoints</h5></td>
                        <td>
                            @*@*Hover Dropdown*@
                            <div class="dropdown center-block dropdown-hover">
                                <a class="dropdown-toggle" data-toggle="dropdown">
                                    <span class="fa fa-users"></span>
                                </a>

                                <div class="container-fluid dropdown-menu dropdown-menu-hover">

                                    @for (int i = 0; i < 6; i++)
                                    {
                                        var userCreature = opponent.UserCreatures.Where(uc => uc.InSquad).FirstOrDefault(uc => uc.Slot == i + 1);

                                        <div class="col-md-4 col-xs-4">
                                            <div class="col-md-12 gamecard-xs">
                                                <p>
                                                    @(userCreature != null ? "Lvl: " + userCreature.Level.ToString() : "Empty")
                                                    @if (userCreature != null)
                                                    {
                                                        <span>
                                                            <img class="gamecard-element-xs" src="@Helper.GetElementUrl(userCreature.Creature.Element)" />
                                                        </span>
                                                    }
                                                </p>
                                                <img class="img-responsive" src="@(userCreature != null ? userCreature.Creature.ImageUrl : "/Images/Other/concrete.jpg")" />
                                                <p>Dmg: @(userCreature != null ? userCreature.Damage.ToString() : "")</p>
                                                <p>Def: @(userCreature != null ? userCreature.Defense.ToString() : "")</p>
                                                <p>Hp: @(userCreature != null ? userCreature.Hp.ToString() : "")</p>
                                            </div>
                                        </div>

                                        if (i == 2)
                                        {
                                            <div class="clearfix visible-xs"></div>
                                            <div class="clearfix visible-sm"></div>
                                                    <div class="clearfix visible-md"></div>
                                                    <div class="clearfix visible-lg"></div>
                                        }
                                    }
                                </div>
                            </div>
                        </td>
                        <td class="text-right"><h5>@(battle.StartTime.Subtract(DateTime.Now.TimeOfDay).Minute + 1)m</h5></td>
                    </tr>
                }

            </tbody>
        </table>
    </div>
</section>
<section class="container-fluid profile-partial margin-top-20">
    <div class="col-md-12 col-battles">
        <h3>Recent Battles</h3>
        <table class="table table-striped">
            <thead>
                <tr>
                    <th>Opponent</th>
                    <th class="text-center">Ladder Points</th>
                    <th class="text-right">Result</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var battle in Model.RecentBattles)
            {
                    <tr>
                        <td><h5>@battle.Competitors.First(c => c.UserId != Model.UserId).User.UserName</h5></td>
                        <td class="text-center">
                            @{
                                var rankingPointsEarned = battle.Competitors.First(c => c.UserId == Model.UserId).RankingPointsEarned;
                            }

                            @if (rankingPointsEarned > 0)
                            {
                                <h5 class="text-success">@rankingPointsEarned</h5>
                            }

                            else
                            {
                                <h5 class="text-danger">@rankingPointsEarned</h5>
                            }

                        </td>
                        <td class="text-right">
                            <a class="fancybox" href="#Result-@battle.Id"><span class="fa fa-2x fa-eye"></span></a>

                            @*Result Box*@
                            <div class="fancybox-hidden" id="Result-@battle.Id">

                                @{
                                    Competitor challenger = battle.Competitors.First(c => c.Challenger);
                                    Competitor receiver = battle.Competitors.First(c => !c.Challenger);
                                }

                                <h3 class="text-center">Winner: @battle.Competitors.First(c => c.Winner).User.UserName</h3>
                                <hr />
                                <div class="container">
                                    <div class="row">
                                        <div class="col-md-6">
                                            <h3>@challenger.User.UserName</h3>
                                            <h4>Gold Earned: @challenger.GoldEarned</h4>
                                            <h4>Xp Earned: @challenger.XpEarned</h4>
                                            <h4>Ladder Points @(challenger.RankingPointsEarned > 0 ? "Earned: " + challenger.RankingPointsEarned : "Lost: " + challenger.RankingPointsEarned)</h4>
                                            @foreach (var battleCharacter in challenger.BattleCreatures.Where(bc => bc.XpEarned > 0).OrderBy(bc => bc.Slot))
                                            {
                                                <h5>@(battleCharacter.Creature.Name) Earned: @(battleCharacter.XpEarned)Xp</h5>
                                            }
                                        </div>
                                        <div class="col-md-6 text-right">
                                            <h3>@receiver.User.UserName</h3>
                                            <h4>Gold Earned: @receiver.GoldEarned</h4>
                                            <h4>Xp Earned: @receiver.XpEarned</h4>
                                            <h4>Ladder Points @(receiver.RankingPointsEarned > 0 ? "Earned:" + receiver.RankingPointsEarned : "Lost:" + receiver.RankingPointsEarned)</h4>
                                            @foreach (var battleCharacter in receiver.BattleCreatures.Where(bc => bc.XpEarned > 0).OrderBy(bc => bc.Slot))
                                            {
                                                <h5>@(battleCharacter.Creature.Name) Earned: @(battleCharacter.XpEarned)xp</h5>
                                            }
                                        </div>

                                        @foreach (var attack in battle.Attacks)
                                        {
                                            <div class="clearfix visible-xs"></div>
                                            <div class="clearfix visible-sm"></div>
                                            <div class="clearfix visible-md"></div>
                                            <div class="clearfix visible-lg"></div>

                                            <div class="col-md-4 col-sm-4">
                                                <div class="col-md-12 gamecard margin-bottom-20">
                                                    <div class="col-md-12 col-xs-12">
                                                        <h3>
                                                            <strong>@attack.Attacker.Creature.Name</strong><span> (@attack.Attacker.Competitor.User.UserName)</span>
                                                            <span><img class="gamecard-element" src="@Helper.GetElementUrl(attack.Attacker.Creature.Element)" /></span>
                                                        </h3>
                                                    </div>
                                                    <img class="img-responsive gamecard-image" src="@attack.Attacker.Creature.ImageUrl" />
                                                    <div class="gamecard-hpbar">
                                                        <div style="width: @Helper.GetPercentage(attack.AttackerHpRemaining, attack.Attacker.MaxHp)%"></div>
                                                    </div>
                                                    <p class="text-right">Hp: @(attack.AttackerHpRemaining > 0 ? attack.AttackerHpRemaining : 0) / @attack.Attacker.MaxHp</p>
                                                    <p>Level: @attack.Attacker.Level</p>
                                                    <p>Attack: @attack.Attacker.Damage</p>
                                                    <p>Defense: @attack.Attacker.Defense</p>
                                                </div>
                                            </div>
                                            <div class="text-center col-md-4 col-sm-4 attack-info">

                                                <h3 class="text-danger">@(attack.Attacker.Creature.Name) dealt @(attack.Damage) damage to @(attack.Defender.Creature.Name)</h3>
                                                <h4>The attack was @Helper.GetEffect(attack.Effect).ToLower()</h4>

                                            </div>
                                            <div class="col-md-4 col-sm-4">
                                                <div class="col-md-12 gamecard">
                                                    <div class="col-md-12 col-xs-12">
                                                        <h3>
                                                            <strong>@attack.Defender.Creature.Name</strong><span> (@attack.Defender.Competitor.User.UserName)</span>
                                                            <span><img class="gamecard-element" src="@Helper.GetElementUrl(attack.Defender.Creature.Element)" /></span>
                                                        </h3>
                                                    </div>
                                                    <img class="img-responsive gamecard-image" src="@attack.Defender.Creature.ImageUrl" />
                                                    <div class="gamecard-hpbar">
                                                        <div style="width: @Helper.GetPercentage(attack.DefenderHpRemaining, attack.Defender.MaxHp)%"></div>
                                                    </div>
                                                    <p class="text-right">Hp: @(attack.DefenderHpRemaining > 0 ? attack.DefenderHpRemaining : 0) / @attack.Defender.MaxHp</p>
                                                    <p>Level: @attack.Defender.Level</p>
                                                    <p>Attack: @attack.Defender.Damage</p>
                                                    <p>Defense: @attack.Defender.Defense</p>
                                                </div>
                                            </div>

                                            <hr />

                                            <div class="clearfix visible-xs"></div>
                                                <div class="clearfix visible-sm"></div>
                                                <div class="clearfix visible-md"></div>
                                                <div class="clearfix visible-lg"></div>
                                        }
                                    </div>
                                </div>
                            </div>
                        </td>
                    </tr>
                                    }

            </tbody>
        </table>
    </div>
</section>
